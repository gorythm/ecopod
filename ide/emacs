;; .emacs

(custom-set-variables
 ;; uncomment to always end a file with a newline
 ;'(require-final-newline t)
 ;; uncomment to disable loading of "default.el" at startup
 ;'(inhibit-default-init t)
 ;; default to unified diffs
 '(diff-switches "-u"))

;;; uncomment for CJK utf-8 support for non-Asian users
;; (require 'un-define)

;; Display line numbers
(global-display-line-numbers-mode)

;; Set TLS Algorith priority
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

;; Show line number in the mode line.
(line-number-mode 1)

;; syntax highlighting
(global-font-lock-mode 1)
(setq column-number-mode t)

;; Define and initialise package repositories
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/")t)
(package-initialize)


(unless package-archive-contents
  (package-refresh-contents))

;; use-package to simplify the config file
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure 't)

;; Keyboard-centric user interface
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;;; set separte backup directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
)

;; Theme
(use-package spacegray-theme
  :config (load-theme 'spacegray t))


(setq package-list '(company yasnippet flycheck go-mode lsp-mode lsp-ui ))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
      (package-install package)))

(add-hook 'go-mode-hook (lambda ()
    (setq tab-width 4)))

;; Company mode
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)

(require 'lsp-mode)
;;(add-hook 'go-mode-hook #'lsp-deferred)

(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)

;; Go - lsp-mode
;; Set up before-save hooks to format buffer and add/delete imports.
(use-package lsp-mode
   :ensure t
   :init
   (setq lsp-gopls-server-args '("--remote=0.0.0.0:7050"))
   :commands (lsp lsp-deferred)
   :hook (go-mode . lsp-deferred)
   :config
   ;; Set up before-save hooks to format buffer and add/delete imports.
   ;; Make sure you don't have other gofmt/goimports hooks enabled.
   (defun lsp-go-install-save-hooks ()
      "Comment lsp-go-install-save-hooks."
      (add-hook 'before-save-hook #'lsp-format-buffer t t)
      (add-hook 'before-save-hook #'lsp-organize-imports t t))
   (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
   )

;; Start LSP Mode and YASnippet mode
(add-hook 'go-mode-hook #'yas-minor-mode)
